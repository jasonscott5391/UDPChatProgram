/* Copyright (C) 2014 Jason Scott */
#include "udpchat.h"

int main(int argc, char** argv) {
    
  char *password = (char *)malloc(sizeof(char) * 16);
  
  if(argc != 2) {
    fprintf(stderr, "Usage: [username]\n");
    exit(0);
  }

  fprintf(stdout, "Password: ");
  getuserpass(password, 16, stdin);
  fprintf(stdout, "\n");

  fprintf(stdout, "Password is %s", password);
  
  struct sockaddr_in serv_addr;
  int sockfd;
  socklen_t slen = sizeof(serv_addr);
  char buf[BUFLEN];
  
  if((sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1) {
    fprintf(stderr, "Error: socket()\n");
  }
  bzero(&serv_addr, sizeof(serv_addr));
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(PORT);
  
  if(inet_aton(IP, &serv_addr.sin_addr) == 0) {
    fprintf(stderr, "Error: inet_aton()\n");
    exit(1);
  }

  // Send username and password then wait for authentication
  int i = 1;
  char *auth = (char *)malloc(sizeof(char));
  
  while(i) {

    // Send username
    if(sendto(sockfd, argv[1], 32, 0, (struct sockaddr*)&serv_addr, slen) == -1) {
      fprintf(stderr, "Error: authentication sendto(username)");
    }
   
    // Send password
    if(sendto(sockfd, password, 32, 0, (struct sockaddr*)&serv_addr, slen) == -1) {
      fprintf(stderr, "Error: authentication sendto(password)");
    }

    fprintf(stdout, "Logging in...\n");

    // Receive authentication confirmation
    if(recvfrom(sockfd, auth, 1, 0, (struct sockaddr*)&serv_addr, &slen) == -1) {
      fprintf(stderr, "Error: authentication recvfrom()\n");
    }

    // Test returned value
    if(strncmp(auth, "1", 1) != 0) {
      fprintf(stdout, "Authentication failed, re-launch...\n");
      exit(0);
    } else {
      fprintf(stdout, "Authentication successful...\n");
      i = 0;
    }     
   
  }

  // Messaging
  while(1) {
    fprintf(stdout, "<%s>", argv[1]);

    // get message from standard in
    filegetline(buf, BUFLEN, stdin);

    // send message to server
    if(sendto(sockfd, buf, BUFLEN, 0, (struct sockaddr*)&serv_addr, slen) == -1) {
      fprintf(stderr, "Error: sendto()\n");
    }

    fprintf(stdout, "Awaiting message from server\n");

    // receive message from server
    if(recvfrom(sockfd, buf, BUFLEN, 0, (struct sockaddr*)&serv_addr, &slen) == -1) {
     fprintf(stderr, "Error: recvfrom()");
     }

    fprintf(stdout, "<server>%s", buf);
  } 
   close(sockfd);
   return 0;
}

